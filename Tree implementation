#include <iostream>
#include <vector>
#include <climits>

using namespace std;

struct TreeNode {
    int value;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) : value(val), left(nullptr), right(nullptr) {}
};

class BinaryTree {
private:
    TreeNode* root;

    TreeNode* insertNode(TreeNode* node, int value) {
        if (node == nullptr) {
            return new TreeNode(value);
        }
        if (value < node->value) {
            node->left = insertNode(node->left, value);
        } else {
            node->right = insertNode(node->right, value);
        }
        return node;
    }

    TreeNode* deleteNode(TreeNode* node, int value) {
        if (node == nullptr) return nullptr;

        if (value < node->value) {
            node->left = deleteNode(node->left, value);
        } else if (value > node->value) {
            node->right = deleteNode(node->right, value);
        } else {
            if (node->left == nullptr) return node->right;
            if (node->right == nullptr) return node->left;

            TreeNode* temp = node->right;
            while (temp->left != nullptr) temp = temp->left;
            node->value = temp->value;
            node->right = deleteNode(node->right, temp->value);
        }
        return node;
    }

    bool searchNode(TreeNode* node, int value) {
        if (node == nullptr) return false;
        if (node->value == value) return true;
        return (value < node->value) ? searchNode(node->left, value) : searchNode(node->right, value);
    }

    int findMin(TreeNode* node) {
        while (node->left != nullptr) node = node->left;
        return node->value;
    }

    int findMax(TreeNode* node) {
        while (node->right != nullptr) node = node->right;
        return node->value;
    }

    bool isBST(TreeNode* node, TreeNode* minNode = nullptr, TreeNode* maxNode = nullptr) {
        if (node == nullptr) return true;
        if ((minNode && node->value <= minNode->value) || 
            (maxNode && node->value >= maxNode->value)) 
            return false;
        return isBST(node->left, minNode, node) && isBST(node->right, node, maxNode);
    }

    void inOrderTraversal(TreeNode* node) {
        if (node != nullptr) {
            inOrderTraversal(node->left);
            cout << node->value << " ";
            inOrderTraversal(node->right);
        }
    }

    void deleteTree(TreeNode* node) {
        if (node != nullptr) {
            deleteTree(node->left);
            deleteTree(node->right);
            delete node;
        }
    }

public:
    BinaryTree() : root(nullptr) {}

    ~BinaryTree() {
        deleteTree(root);
    }

    void insert(int value) {
        root = insertNode(root, value);
    }

    void deleteValue(int value) {
        root = deleteNode(root, value);
    }

    bool search(int value) {
        return searchNode(root, value);
    }

    int getMin() {
        if (root == nullptr) throw runtime_error("Tree is empty");
        return findMin(root);
    }

    int getMax() {
        if (root == nullptr) throw runtime_error("Tree is empty");
        return findMax(root);
    }

    bool validateBST() {
        return isBST(root);
    }

    void displayInOrder() {
        inOrderTraversal(root);
        cout << endl;
    }
};

TreeNode* buildTree(vector<int>& preorder, int& index, int min, int max) {
    if (index == preorder.size() || preorder[index] < min || preorder[index] > max) 
        return nullptr;

    TreeNode* root = new TreeNode(preorder[index++]);
    root->left = buildTree(preorder, index, min, root->value);
    root->right = buildTree(preorder, index, root->value, max);

    return root;
}

int main() {
    BinaryTree tree;

    tree.insert(10);
    tree.insert(5);
    tree.insert(15);
    tree.insert(3);
    tree.insert(7);

    cout << "In-order Traversal: ";
    tree.displayInOrder();

    cout << "Search for 7: " << (tree.search(7) ? "Found" : "Not Found") << endl;
    cout << "Search for 20: " << (tree.search(20) ? "Found" : "Not Found") << endl;

    cout << "Minimum: " << tree.getMin() << endl;
    cout << "Maximum: " << tree.getMax() << endl;

    cout << "Is valid BST: " << (tree.validateBST() ? "Yes" : "No") << endl;

    tree.deleteValue(10);
    cout << "In-order after deleting 10: ";
    tree.displayInOrder();

    vector<int> preorder = {10, 5, 3, 7, 15};
    int index = 0;
    TreeNode* newTree = buildTree(preorder, index, INT_MIN, INT_MAX);

    return 0;
}
