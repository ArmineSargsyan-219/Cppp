#include <iostream>
#include <vector>
#include <algorithm>
#include <stdexcept>
#include <stack>
#include <queue>

using namespace std;

class Graph {
public:
    int V;  
    vector<vector<int>> adjList;  

    Graph(int V) {
        this->V = V;
        adjList.resize(V);
    }

    void addEdge(int u, int v) {
        if (u < 0 || u >= V || v < 0 || v >= V) {
            throw out_of_range("Vertex out of range");
        }
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }

    void printGraph() {
        for (int i = 0; i < V; i++) {
            cout << "Vertex " << i << ": ";
            for (int j = 0; j < adjList[i].size(); j++) {
                cout << adjList[i][j] << " ";
            }
            cout << endl;
        }
    }

    bool isConnectedAfterRemoving(int removeVertex) {
        vector<bool> visited(V, false);
        dfs(0, visited, removeVertex);  

        for (int i = 0; i < V; i++) {
            if (i != removeVertex && !visited[i]) {
                return false; 
            }
        }
        return true;
    }

    void dfs(int v, vector<bool>& visited, int removeVertex) {
        visited[v] = true;
        for (int neighbor : adjList[v]) {
            if (neighbor != removeVertex && !visited[neighbor]) {
                dfs(neighbor, visited, removeVertex);
            }
        }
    }
};

int main() {
    int V = 5;  
    int E = 4;  

    Graph g(V);

    vector<pair<int, int>> edges = {
        {0, 1},  // City 0 is connected to City 1
        {1, 2},  // City 1 is connected to City 2
        {2, 3},  // City 2 is connected to City 3
        {3, 4}   // City 3 is connected to City 4
    };

    for (const auto& edge : edges) {
        g.addEdge(edge.first, edge.second);
    }

    cout << "Original Graph:" << endl;
    g.printGraph();

    int leafVertex = 4;

    if (g.isConnectedAfterRemoving(leafVertex)) {
        cout << "The graph remains connected after removing vertex " << leafVertex << "." << endl;
    } else {
        cout << "The graph becomes disconnected after removing vertex " << leafVertex << "." << endl;
    }

    return 0;
}
