#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_set>

using namespace std;

class DSU {
public:
    vector<int> parent, size;

    DSU(int n) {
        parent.resize(n);
        size.resize(n, 1);
        for (int i = 0; i < n; ++i)
            parent[i] = i;
    }

    int find(int x) {
        if (parent[x] != x)
            parent[x] = find(parent[x]); 
        return parent[x];
    }

    void union_sets(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        
        if (rootX != rootY) {
            if (size[rootX] < size[rootY]) 
                swap(rootX, rootY);
            parent[rootY] = rootX;
            size[rootX] += size[rootY];
        }
    }
};

class Graph {
public:
    int V; 
    vector<vector<int>> adjList;
    unordered_set<string> removedEdges; 

    Graph(int V) {
        this->V = V;
        adjList.resize(V);
    }

    void addEdge(int u, int v) {
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }

    void removeEdge(int u, int v) {
        removedEdges.insert(to_string(min(u, v)) + "," + to_string(max(u, v)));
    }

    void printGraph() {
        for (int i = 0; i < V; i++) {
            cout << "Vertex " << i << ": ";
            for (int j = 0; j < adjList[i].size(); j++) {
                int neighbor = adjList[i][j];
                if (removedEdges.find(to_string(min(i, neighbor)) + "," + to_string(max(i, neighbor))) == removedEdges.end()) {
                    cout << neighbor << " ";
                }
            }
            cout << endl;
        }
    }
};

int maxEdgesToRemove(int rows, int cols, Graph &g) {
    int numVertices = (rows + 1) * (cols + 1);

    DSU dsu(numVertices);

    for (int r = 0; r <= rows; ++r) {
        for (int c = 0; c < cols; ++c) {
            int node1 = r * (cols + 1) + c;
            int node2 = r * (cols + 1) + c + 1;
            g.addEdge(node1, node2);
            if (dsu.find(node1) != dsu.find(node2)) {
                dsu.union_sets(node1, node2);
            } else {
                g.removeEdge(node1, node2);
            }
        }
    }

    for (int c = 0; c <= cols; ++c) {
        for (int r = 0; r < rows; ++r) {
            int node1 = r * (cols + 1) + c;
            int node2 = (r + 1) * (cols + 1) + c;
            g.addEdge(node1, node2);
            if (dsu.find(node1) != dsu.find(node2)) {
                dsu.union_sets(node1, node2);
            } else {
                g.removeEdge(node1, node2); 
            }
        }
    }

    int numSpanningTreeEdges = numVertices - 1;

    return numSpanningTreeEdges;
}

int main() {
    int rows = 50;
    int cols = 600;

    int numVertices = (rows + 1) * (cols + 1);

    Graph g(numVertices);

    int result = maxEdgesToRemove(rows, cols, g);

    cout << "Maximum number of edges that can be removed: " << result << endl;

    cout << "\nGraph after removing edges:\n";
    g.printGraph();

    return 0;
}
